@page
@model TriviaSpark.Web.Pages.TriviaMatchModel
@{
    var answers = Model?.currentQuestion?.Answers?.ToList() ?? new();
    answers = answers.OrderBy(x => Guid.NewGuid()).ToList();
}
@section HeadScripts
    {
    <style type="text/css">

    </style>
}
<div class="jumbotron">
    <div class="container">
        <form method="post">
            @Html.HiddenFor(model =>model.MatchId)
            <div class="card border-info">
                <div class="card-header">
                    @if (Model.IsMatchFinished)
                    {
                        <h1>Match Finished</h1>
                        @Html.LabelFor(model=> model.AddQuestions)
                        @Html.CheckBoxFor(model=>model.AddQuestions)
                    }
                    else
                    {
                        @Html.HiddenFor(model =>model.currentAnswer.QuestionId)
                        <h1>@Html.DisplayFor(model => model.currentQuestion.Category) Trivia</h1>
                    }
                </div>
                <div class="card-body">
                    <div class="container mt-sm-5 my-1">
                        @if (!Model.IsMatchFinished)
                        {
                            @if (Model.currentQuestion is null)
                            {

                            }
                            else
                            {
                                @Html.HiddenFor(model =>model.currentQuestion.QuestionId)
                                @if (!Model.IsMatchFinished)
                                {
                                    <div class="question ml-sm-5 pl-sm-5 pt-2">
                                        <div class="py-2 h5"><b>Q. @Html.Raw(Model.currentQuestion.QuestionText)</b></div>
                                        <div class="ml-md-3 ml-sm-3 pl-md-5 pt-sm-0 pt-3" id="options">
                                            <div class="form-group">
                                                <hr />
                                                @foreach (var answer in answers)
                                                {
                                                    <div class="options">
                                                        <input type="radio" asp-for="currentAnswer.AnswerText" value="@answer.AnswerText" /> @Html.Raw(answer.AnswerText)
                                                        <span class="checkmark"></span>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        }
                    </div>
                    <div class="ml-sm-5 pl-sm-5 pt-2">
                        @if (@Model.IsMatchFinished)
                        {
                            <button type="submit" class="btn btn-primary">Add More Questions</button>
                        }
                        else
                        {
                            if (@Model.currentAnswer.IsCorrect)
                            {
                                <h1>Correct!</h1>
                                <button trype="submit" class="btn btn-primary">New Question</button>
                            }
                            else
                            {
                                <button type="submit" class="btn btn-primary">Check Answer</button>
                            }
                        }
                    </div>
                </div>
                <div class="card-footer">
                    @Html.DisplayFor(model => model.theMatchStatus)
                </div>
            </div>
        </form>
    </div>
</div>
<div>
    <div class="card">
        <div class="card-header">
            <ul>
                <li>@Html.DisplayFor(model => model.triviaMatch.MatchName)</li>
                <li>@Html.DisplayFor(model => model.triviaMatch.MatchId)</li>
                <li>@Html.DisplayFor(model => model.triviaMatch.User.UserName)</li>
                <li>@Html.DisplayFor(model => model.triviaMatch.MatchDate)</li>
            </ul>
        </div>
        <div class="card-body">
            @Html.DisplayFor(model => model.triviaMatch.MatchQuestions.Count) Total Questions Count<br />
            @Model.triviaMatch.MatchQuestionAnswers.Select(s=>s.QuestionId).Distinct().Count() Questions With Answers<br />
            @Model.triviaMatch.MatchQuestions.GetIncorrectQuestions(Model.triviaMatch.MatchQuestionAnswers).Count() Questions with only Incorrect Answers<br />
            @Model.triviaMatch.MatchQuestions.GetCorrectQuestions(Model.triviaMatch.MatchQuestionAnswers).Count() Questions with correct Ansers<br />
            @Model.triviaMatch.MatchQuestionAnswers.Count() Total Answers<br />

            <h2>Correct Questions</h2>
            <dl>
                @foreach (var q in Model.triviaMatch.MatchQuestions.GetCorrectQuestions(Model.triviaMatch.MatchQuestionAnswers))
                {
                    <dt>@Html.Raw(q.QuestionText)</dt>
                    <dt>@Html.Raw(q.CorrectAnswer)</dt>
                }
            </dl>
            <h2>Incorrect Questions</h2>
            <dl>
                @foreach (var q in Model.triviaMatch.MatchQuestions.GetIncorrectQuestions(Model.triviaMatch.MatchQuestionAnswers))
                {
                    <dt>@Html.Raw(q.QuestionText)</dt>
                    <dd></dd>
                }
            </dl>
        </div>
        <div class="card-footer">
        </div>
    </div>

</div>




@section Scripts {
    <script>
        // Disable client-side validation for this form
        $.validator.unobtrusive.options = {
            validateOnSubmit: false
        };
    </script>
}